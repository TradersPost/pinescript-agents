//@version=6
// ============================================================================
// MACD Zero Line Momentum Strategy
// ============================================================================
// Project: MACD Zero Line Momentum Strategy
// Type: Strategy
// Created: 2025-08-14
// 
// Strategy Logic:
// - Entry: MACD line crosses above Signal line AND both above zero line (long)
// - Exit: Stop loss below 200-day MA (dynamic), take profit on opposite crossover
// - Risk Management: 2% max risk per trade, position size based on stop distance
// - Signals: Confirmed bars only (no repainting)
// ============================================================================

strategy(title="MACD Zero Line Momentum Strategy", 
     shorttitle="MACD Zero Strategy",
     overlay=true,
     default_qty_type=strategy.percent_of_equity,
     default_qty_value=10,
     commission_type=strategy.commission.percent,
     commission_value=0.1,
     slippage=2,
     process_orders_on_close=true,
     max_bars_back=5000)

// ============================================================================
// INPUTS
// ============================================================================

// MACD Settings
g_macd = "MACD Settings"
fastLength = input.int(12, "Fast Length", minval=1, group=g_macd, tooltip="Fast EMA period for MACD calculation")
slowLength = input.int(26, "Slow Length", minval=1, group=g_macd, tooltip="Slow EMA period for MACD calculation")
signalLength = input.int(9, "Signal Length", minval=1, group=g_macd, tooltip="Signal line EMA period")

// Moving Average Settings
g_ma = "Moving Average Settings"
maLength = input.int(200, "MA Length for Stop Loss", minval=1, group=g_ma, tooltip="Moving average period for dynamic stop loss")
maType = input.string("EMA", "MA Type", options=["SMA", "EMA", "WMA", "VWMA"], group=g_ma, tooltip="Type of moving average for stop loss")

// Risk Management
g_risk = "Risk Management"
riskPercent = input.float(2.0, "Max Risk Per Trade (%)", minval=0.1, maxval=10.0, step=0.1, group=g_risk, tooltip="Maximum risk per trade as percentage of equity")
useTrailingStop = input.bool(true, "Use Trailing Stop", group=g_risk, tooltip="Enable trailing stop at MA level")
minStopDistance = input.float(0.5, "Min Stop Distance (%)", minval=0.1, maxval=5.0, step=0.1, group=g_risk, tooltip="Minimum stop loss distance from entry price")

// Trading Hours
g_time = "Trading Hours"
useTimeFilter = input.bool(false, "Use Time Filter", group=g_time)
startTime = input.session("0930-1600", "Trading Session", group=g_time, tooltip="Trading hours (exchange timezone)")

// Visual Settings
g_visual = "Visual Settings"
showMACD = input.bool(true, "Show MACD Indicator", group=g_visual)
showSignals = input.bool(true, "Show Entry/Exit Signals", group=g_visual)
showStopLoss = input.bool(true, "Show Stop Loss Level", group=g_visual)

// ============================================================================
// CALCULATIONS
// ============================================================================

// Moving Average Function
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

// MACD Calculation
[macdLine, signalLine, histogram] = ta.macd(close, fastLength, slowLength, signalLength)

// Moving Average for Stop Loss
stopMA = ma(close, maLength, maType)

// Time Filter
inSession = useTimeFilter ? not na(time(timeframe.period, startTime)) : true

// ============================================================================
// CONDITIONS
// ============================================================================

// Entry Conditions (confirmed bars only)
macdAboveZero = macdLine > 0 and signalLine > 0
macdCrossUp = ta.crossover(macdLine, signalLine)
longCondition = macdAboveZero and macdCrossUp and barstate.isconfirmed and inSession

// Exit Conditions
macdCrossDown = ta.crossunder(macdLine, signalLine)
exitCondition = macdCrossDown and barstate.isconfirmed

// Stop Loss Calculation
var float entryPrice = na
var float stopLossLevel = na
var float positionSize = na

if longCondition and strategy.position_size == 0
    entryPrice := close
    stopLossLevel := math.min(stopMA, close * (1 - minStopDistance / 100))
    
    // Calculate position size based on risk
    stopDistance = entryPrice - stopLossLevel
    riskAmount = strategy.equity * (riskPercent / 100)
    positionSize := math.max(1, math.floor(riskAmount / stopDistance))

// Update trailing stop
if strategy.position_size > 0 and useTrailingStop
    newStopLevel = math.min(stopMA, close * (1 - minStopDistance / 100))
    if newStopLevel > stopLossLevel
        stopLossLevel := newStopLevel

// ============================================================================
// STRATEGY EXECUTION
// ============================================================================

// Long Entry
if longCondition and strategy.position_size == 0
    strategy.entry("Long", strategy.long, qty=positionSize, comment="MACD Long")

// Exit on MACD Cross Down
if exitCondition and strategy.position_size > 0
    strategy.close("Long", comment="MACD Exit")

// Stop Loss Exit
if strategy.position_size > 0 and close <= stopLossLevel
    strategy.close("Long", comment="Stop Loss")

// ============================================================================
// PLOTS
// ============================================================================

// Moving Average
plot(stopMA, "Stop Loss MA", color=color.red, linewidth=2)

// Entry and Exit Signals
plotshape(longCondition and showSignals, "Long Entry", shape.triangleup, location.belowbar, 
     color.green, size=size.normal, text="BUY")
plotshape(exitCondition and strategy.position_size > 0 and showSignals, "Exit Signal", 
     shape.triangledown, location.abovebar, color.red, size=size.normal, text="SELL")

// Stop Loss Level
plot(strategy.position_size > 0 and showStopLoss ? stopLossLevel : na, "Stop Loss", 
     color=color.red, style=plot.style_linebr, linewidth=1)

// Background color for position
bgcolor(strategy.position_size > 0 ? color.new(color.green, 95) : na, title="Position Background")

// ============================================================================
// MACD INDICATOR (Separate Pane)
// ============================================================================

if showMACD
    // MACD Lines
    macdPlot = plot(macdLine, "MACD Line", color=color.blue, linewidth=2)
    signalPlot = plot(signalLine, "Signal Line", color=color.red, linewidth=2)
    
    // Zero Line
    hline(0, "Zero Line", color=color.gray, linestyle=hline.style_dashed)
    
    // Histogram
    histColor = histogram >= 0 ? (histogram[1] < histogram ? color.lime : color.green) : 
         (histogram[1] < histogram ? color.maroon : color.red)
    plot(histogram, "Histogram", color=histColor, style=plot.style_columns)
    
    // Fill between MACD and Signal
    fill(macdPlot, signalPlot, 
         color=macdLine >= signalLine ? color.new(color.green, 80) : color.new(color.red, 80), 
         title="MACD Fill")

// ============================================================================
// ALERTS
// ============================================================================

// Alert Conditions
alertcondition(longCondition, "MACD Long Entry", 
     "MACD Zero Line Strategy: Long Entry Signal")
alertcondition(exitCondition and strategy.position_size > 0, "MACD Exit", 
     "MACD Zero Line Strategy: Exit Signal")
alertcondition(strategy.position_size > 0 and close <= stopLossLevel, "Stop Loss Hit", 
     "MACD Zero Line Strategy: Stop Loss Triggered")

// ============================================================================
// BACKTESTING METRICS
// ============================================================================

// Performance Metrics Table
if barstate.islastconfirmedhistory
    var table performanceTable = table.new(position.top_right, 2, 8, 
         bgcolor=color.white, border_width=1)
    
    // Calculate metrics
    totalTrades = strategy.closedtrades
    winRate = totalTrades > 0 ? strategy.wintrades / totalTrades * 100 : 0
    profitFactor = strategy.grossloss != 0 ? math.abs(strategy.grossprofit / strategy.grossloss) : 0
    avgWin = strategy.wintrades > 0 ? strategy.grossprofit / strategy.wintrades : 0
    avgLoss = strategy.losstrades > 0 ? strategy.grossloss / strategy.losstrades : 0
    maxDD = strategy.max_drawdown
    netProfit = strategy.netprofit
    
    // Populate table
    table.cell(performanceTable, 0, 0, "Metric", 
         text_color=color.black, text_size=size.small)
    table.cell(performanceTable, 1, 0, "Value", 
         text_color=color.black, text_size=size.small)
    
    table.cell(performanceTable, 0, 1, "Total Trades", 
         text_color=color.black, text_size=size.small)
    table.cell(performanceTable, 1, 1, str.tostring(totalTrades), 
         text_color=color.black, text_size=size.small)
    
    table.cell(performanceTable, 0, 2, "Win Rate %", 
         text_color=color.black, text_size=size.small)
    table.cell(performanceTable, 1, 2, str.tostring(math.round(winRate, 2)) + "%", 
         text_color=color.black, text_size=size.small)
    
    table.cell(performanceTable, 0, 3, "Profit Factor", 
         text_color=color.black, text_size=size.small)
    table.cell(performanceTable, 1, 3, str.tostring(math.round(profitFactor, 2)), 
         text_color=color.black, text_size=size.small)
    
    table.cell(performanceTable, 0, 4, "Avg Win", 
         text_color=color.black, text_size=size.small)
    table.cell(performanceTable, 1, 4, "$" + str.tostring(math.round(avgWin, 2)), 
         text_color=color.black, text_size=size.small)
    
    table.cell(performanceTable, 0, 5, "Avg Loss", 
         text_color=color.black, text_size=size.small)
    table.cell(performanceTable, 1, 5, "$" + str.tostring(math.round(avgLoss, 2)), 
         text_color=color.black, text_size=size.small)
    
    table.cell(performanceTable, 0, 6, "Max Drawdown", 
         text_color=color.black, text_size=size.small)
    table.cell(performanceTable, 1, 6, "$" + str.tostring(math.round(maxDD, 2)), 
         text_color=color.black, text_size=size.small)
    
    table.cell(performanceTable, 0, 7, "Net Profit", 
         text_color=color.black, text_size=size.small)
    table.cell(performanceTable, 1, 7, "$" + str.tostring(math.round(netProfit, 2)), 
         text_color=netProfit >= 0 ? color.green : color.red, text_size=size.small)

// ============================================================================
// DEBUG INFORMATION
// ============================================================================

// Debug labels on latest bars (optional - can be enabled during testing)
debugMode = input.bool(false, "Debug Mode", group="Debug", tooltip="Show debug information on chart")

if debugMode and barstate.islast
    var label debugLabel = label.new(bar_index, high, 
         "MACD: " + str.tostring(math.round(macdLine, 4)) + "\n" +
         "Signal: " + str.tostring(math.round(signalLine, 4)) + "\n" +
         "Above Zero: " + str.tostring(macdAboveZero) + "\n" +
         "Stop Level: " + str.tostring(math.round(stopLossLevel, 2)), 
         style=label.style_label_left, color=color.yellow, textcolor=color.black, size=size.small)
    label.set_xy(debugLabel, bar_index, high * 1.02)