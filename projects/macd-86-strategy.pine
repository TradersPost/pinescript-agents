//@version=6
strategy("MACD 86% Win Rate Strategy", 
     shorttitle="MACD86",
     overlay=true,
     default_qty_type=strategy.percent_of_equity,
     default_qty_value=10,
     commission_type=strategy.commission.percent,
     commission_value=0.1,
     slippage=2,
     calc_on_every_tick=false,
     calc_on_order_fills=true,
     max_bars_back=500)

// ============================================================================
// DEBUGGING FIXES APPLIED
// ============================================================================
// 
// FIXED: MACD and Signal Line values showing as NA in data window
// 
// Problems resolved:
// 1. MACD values were only plotted conditionally when showMACD was true
// 2. Values weren't accessible in data window when visual display was off
// 3. No proper MACD indicator pane below the chart
// 
// Solutions implemented:
// 1. Added separate plot() statements that always make MACD values available
// 2. Used display parameter to control visibility vs data window access
// 3. Created proper MACD indicator pane with histogram and zero line
// 4. Added debug tools to monitor MACD calculations
// 5. Added NA value detection and warnings
// 
// Now MACD values are always available in data window regardless of visual settings
// ============================================================================

// ============================================================================
// INPUTS
// ============================================================================

// MACD Settings
g_macd = "MACD Settings"
fastLength = input.int(12, "Fast MA Length", 
     minval=1, maxval=50, 
     group=g_macd,
     tooltip="Length for fast exponential moving average")
slowLength = input.int(26, "Slow MA Length", 
     minval=1, maxval=100, 
     group=g_macd,
     tooltip="Length for slow exponential moving average")
signalLength = input.int(9, "Signal Line Length", 
     minval=1, maxval=50, 
     group=g_macd,
     tooltip="Length for MACD signal line smoothing")

// Risk Management
g_risk = "Risk Management"
stopLossMA = input.int(200, "Stop Loss MA Period", 
     minval=50, maxval=500, 
     group=g_risk,
     tooltip="Moving average period for stop loss calculation")
useTakeProfit = input.bool(true, "Enable Take Profit", 
     group=g_risk,
     tooltip="Enable 2:1 risk/reward take profit")
riskRewardRatio = input.float(2.0, "Risk/Reward Ratio", 
     minval=1.0, maxval=5.0, step=0.1, 
     group=g_risk,
     tooltip="Risk to reward ratio for take profit")

// Position Sizing
g_position = "Position Sizing"
positionSizeType = input.string("Percent of Equity", "Position Size Type",
     options=["Percent of Equity", "Fixed Contracts", "Risk-Based"],
     group=g_position,
     tooltip="Method for calculating position size")
positionSize = input.float(10.0, "Position Size (%/Contracts)",
     minval=0.1, maxval=100.0,
     group=g_position,
     tooltip="Position size (% for equity, contracts for fixed, % risk for risk-based)")
riskPercent = input.float(2.0, "Risk Per Trade (%)",
     minval=0.1, maxval=10.0,
     group=g_position,
     tooltip="Maximum risk per trade as percentage of equity (for Risk-Based sizing)")

// Visual Settings
g_visual = "Visual Settings"
showMACDOnChart = input.bool(false, "Show MACD on Chart", 
     group=g_visual,
     tooltip="Display MACD indicator overlay on main chart")
showMACDPane = input.bool(true, "Show MACD in Separate Pane", 
     group=g_visual,
     tooltip="Display MACD indicator in separate pane below chart")
showStopLoss = input.bool(true, "Show Stop Loss MA", 
     group=g_visual,
     tooltip="Display stop loss moving average on chart")
showSignals = input.bool(true, "Show Entry/Exit Signals", 
     group=g_visual,
     tooltip="Display buy/sell signals on chart")
showTradeLabels = input.bool(true, "Show Trade Labels", 
     group=g_visual,
     tooltip="Show detailed trade entry/exit labels")

// Colors
g_colors = "Colors"
bullColor = input.color(color.green, "Bull Signal Color", 
     group=g_colors)
bearColor = input.color(color.red, "Bear Signal Color", 
     group=g_colors)
stopLossColor = input.color(color.orange, "Stop Loss MA Color", 
     group=g_colors)
macdColor = input.color(color.blue, "MACD Line Color", 
     group=g_colors)
signalColor = input.color(color.red, "Signal Line Color", 
     group=g_colors)

// Alerts
g_alerts = "Alert Settings"
enableAlerts = input.bool(true, "Enable Alerts", 
     group=g_alerts,
     tooltip="Enable alert notifications for all signals")

// Debug Settings
g_debug = "Debug Settings"
showDebugTable = input.bool(false, "Show MACD Debug Values", 
     group=g_debug,
     tooltip="Display current MACD values in a debug table")
showDebugLabels = input.bool(false, "Show MACD Debug Labels", 
     group=g_debug,
     tooltip="Show labels with MACD values at key points")
debugMaxLabels = input.int(10, "Max Debug Labels", 
     minval=1, maxval=50, 
     group=g_debug,
     tooltip="Maximum number of debug labels to show")

// ============================================================================
// CALCULATIONS
// ============================================================================

// MACD Calculation
[macdLine, signalLine, histLine] = ta.macd(close, fastLength, slowLength, signalLength)

// Stop Loss Moving Average
stopLossMA_value = ta.sma(close, stopLossMA)

// Zero Line Conditions
macdBelowZero = macdLine < 0 and signalLine < 0
macdAboveZero = macdLine > 0 and signalLine > 0

// Crossover Conditions
macdCrossUp = ta.crossover(macdLine, signalLine)
macdCrossDown = ta.crossunder(macdLine, signalLine)

// ============================================================================
// STRATEGY CONDITIONS
// ============================================================================

// Entry Conditions
longCondition = macdCrossUp and macdBelowZero and barstate.isconfirmed
shortCondition = macdCrossDown and macdAboveZero and barstate.isconfirmed

// Exit Conditions - Stop Loss
longStopHit = strategy.position_size > 0 and ta.crossunder(close, stopLossMA_value)
shortStopHit = strategy.position_size < 0 and ta.crossover(close, stopLossMA_value)

// Position Size Calculation
calculatePositionSize() =>
    equity = strategy.equity
    currentPrice = close
    
    switch positionSizeType
        "Percent of Equity" => 
            equity * positionSize / 100 / currentPrice
        "Fixed Contracts" => 
            positionSize
        "Risk-Based" =>
            riskAmount = equity * riskPercent / 100
            if strategy.position_size == 0
                stopDistance = math.abs(currentPrice - stopLossMA_value)
                stopDistance > 0 ? riskAmount / stopDistance : positionSize
            else
                positionSize

qty = calculatePositionSize()

// Take Profit Calculation
var float longTP = na
var float shortTP = na
var float longSL = na
var float shortSL = na

if longCondition and strategy.position_size == 0
    longSL := stopLossMA_value
    if useTakeProfit
        riskDistance = close - longSL
        longTP := close + (riskDistance * riskRewardRatio)
    else
        longTP := na

if shortCondition and strategy.position_size == 0
    shortSL := stopLossMA_value
    if useTakeProfit
        riskDistance = shortSL - close
        shortTP := close - (riskDistance * riskRewardRatio)
    else
        shortTP := na

// ============================================================================
// STRATEGY EXECUTION
// ============================================================================

// Long Entry
if longCondition
    strategy.entry("Long", strategy.long, 
         qty=qty,
         comment="MACD Long Entry")

// Short Entry  
if shortCondition
    strategy.entry("Short", strategy.short, 
         qty=qty,
         comment="MACD Short Entry")

// Stop Loss Exits
if longStopHit
    strategy.close("Long", comment="Stop Loss Hit")
    
if shortStopHit
    strategy.close("Short", comment="Stop Loss Hit")

// Take Profit Exits
if strategy.position_size > 0 and not na(longTP) and ta.crossover(high, longTP)
    strategy.close("Long", comment="Take Profit Hit")
    
if strategy.position_size < 0 and not na(shortTP) and ta.crossunder(low, shortTP)
    strategy.close("Short", comment="Take Profit Hit")

// ============================================================================
// BACKTESTING METRICS
// ============================================================================

// Performance Metrics
var int totalTrades = 0
var int winningTrades = 0
var float totalProfit = 0.0
var float totalLoss = 0.0
var float maxDrawdown = 0.0
var float peakEquity = 0.0

// Update metrics on trade close
if strategy.closedtrades > totalTrades
    totalTrades := strategy.closedtrades
    lastTrade = strategy.closedtrades.profit(strategy.closedtrades - 1)
    
    if lastTrade > 0
        winningTrades += 1
        totalProfit += lastTrade
    else if lastTrade < 0
        totalLoss += math.abs(lastTrade)

// Update drawdown
currentEquity = strategy.equity
if currentEquity > peakEquity
    peakEquity := currentEquity
else
    currentDrawdown = (peakEquity - currentEquity) / peakEquity * 100
    if currentDrawdown > maxDrawdown
        maxDrawdown := currentDrawdown

// Calculate metrics
winRate = totalTrades > 0 ? winningTrades / totalTrades * 100 : 0
profitFactor = totalLoss > 0 ? totalProfit / totalLoss : na
avgWin = winningTrades > 0 ? totalProfit / winningTrades : 0
avgLoss = (totalTrades - winningTrades) > 0 ? totalLoss / (totalTrades - winningTrades) : 0

// ============================================================================
// VISUAL ELEMENTS
// ============================================================================

// Stop Loss MA Plot
plot(showStopLoss ? stopLossMA_value : na, 
     "Stop Loss MA", 
     color=stopLossColor, 
     linewidth=2,
     style=plot.style_line)

// MACD Plots - Always available in data window
plot(macdLine, "MACD Line", 
     color=showMACDPane ? macdColor : na,
     linewidth=2,
     display=showMACDPane ? display.all : display.data_window)

plot(signalLine, "Signal Line", 
     color=showMACDPane ? signalColor : na,
     linewidth=2,
     display=showMACDPane ? display.all : display.data_window)

plot(histLine, "MACD Histogram", 
     color=histLine >= 0 ? color.new(color.green, 50) : color.new(color.red, 50),
     style=plot.style_histogram,
     linewidth=1,
     display=showMACDPane ? display.all : display.data_window)

// Zero line for MACD
hline(0, "MACD Zero Line", 
      color=color.new(color.gray, 50),
      linestyle=hline.style_dashed,
      display=showMACDPane ? display.all : display.none)

// MACD Overlay on Chart (optional)
macdOverlayPlot = plot(showMACDOnChart ? macdLine * 100 + close : na, 
     "MACD Overlay", 
     color=color.new(macdColor, 70),
     linewidth=1,
     display=display.pane)
signalOverlayPlot = plot(showMACDOnChart ? signalLine * 100 + close : na, 
     "Signal Overlay", 
     color=color.new(signalColor, 70),
     linewidth=1,
     display=display.pane)

// Entry Signals
plotshape(showSignals and longCondition, 
     title="Long Signal",
     style=shape.triangleup,
     location=location.belowbar,
     color=bullColor,
     size=size.normal,
     text="BUY")

plotshape(showSignals and shortCondition, 
     title="Short Signal",
     style=shape.triangledown,
     location=location.abovebar,
     color=bearColor,
     size=size.normal,
     text="SELL")

// Trade Labels
if showTradeLabels and longCondition
    label.new(bar_index, low,
         text="LONG\nEntry: " + str.tostring(close, "#.##") + 
              "\nSL: " + str.tostring(longSL, "#.##") +
              (not na(longTP) ? "\nTP: " + str.tostring(longTP, "#.##") : ""),
         style=label.style_label_up,
         color=color.new(bullColor, 20),
         textcolor=color.white,
         size=size.small)

if showTradeLabels and shortCondition
    label.new(bar_index, high,
         text="SHORT\nEntry: " + str.tostring(close, "#.##") + 
              "\nSL: " + str.tostring(shortSL, "#.##") +
              (not na(shortTP) ? "\nTP: " + str.tostring(shortTP, "#.##") : ""),
         style=label.style_label_down,
         color=color.new(bearColor, 20),
         textcolor=color.white,
         size=size.small)

// MACD Debug Table
if showDebugTable
    var table debugTable = table.new(position.top_left, 2, 6, 
         bgcolor=color.new(color.black, 20),
         border_width=1,
         border_color=color.gray)
    
    if barstate.islast
        table.cell(debugTable, 0, 0, "MACD Debug", 
             text_color=color.white, 
             text_size=size.normal,
             bgcolor=color.new(color.blue, 50))
        table.cell(debugTable, 1, 0, "Current Values", 
             text_color=color.white, 
             text_size=size.normal,
             bgcolor=color.new(color.blue, 50))
        
        table.cell(debugTable, 0, 1, "MACD Line", 
             text_color=color.white, text_size=size.small)
        table.cell(debugTable, 1, 1, str.tostring(macdLine, "#.######"), 
             text_color=color.yellow, text_size=size.small)
        
        table.cell(debugTable, 0, 2, "Signal Line", 
             text_color=color.white, text_size=size.small)
        table.cell(debugTable, 1, 2, str.tostring(signalLine, "#.######"), 
             text_color=color.yellow, text_size=size.small)
        
        table.cell(debugTable, 0, 3, "Histogram", 
             text_color=color.white, text_size=size.small)
        table.cell(debugTable, 1, 3, str.tostring(histLine, "#.######"), 
             text_color=color.yellow, text_size=size.small)
        
        table.cell(debugTable, 0, 4, "Below Zero?", 
             text_color=color.white, text_size=size.small)
        table.cell(debugTable, 1, 4, macdBelowZero ? "YES" : "NO", 
             text_color=macdBelowZero ? color.green : color.red, text_size=size.small)
        
        table.cell(debugTable, 0, 5, "Cross Signal", 
             text_color=color.white, text_size=size.small)
        table.cell(debugTable, 1, 5, 
             macdCrossUp ? "CROSS UP" : (macdCrossDown ? "CROSS DOWN" : "NONE"), 
             text_color=macdCrossUp ? color.green : (macdCrossDown ? color.red : color.gray), 
             text_size=size.small)

// MACD Debug Labels
if showDebugLabels and barstate.isconfirmed
    var int labelCount = 0
    
    // Show labels on crossovers or every 20 bars for debugging
    showLabel = (macdCrossUp or macdCrossDown) or (bar_index % 20 == 0)
    
    if showLabel and labelCount < debugMaxLabels
        labelText = "MACD Debug\n" +
                    "Bar: " + str.tostring(bar_index) + "\n" +
                    "MACD: " + (na(macdLine) ? "NA" : str.tostring(macdLine, "#.####")) + "\n" +
                    "Signal: " + (na(signalLine) ? "NA" : str.tostring(signalLine, "#.####")) + "\n" +
                    "Hist: " + (na(histLine) ? "NA" : str.tostring(histLine, "#.####")) + "\n" +
                    "BelowZero: " + (macdBelowZero ? "Y" : "N")
        
        label.new(bar_index, high * 1.05, labelText,
                  style=label.style_label_down,
                  color=color.new(color.purple, 30),
                  textcolor=color.white,
                  size=size.tiny)
        labelCount += 1

// NA Value Detection and Warning
var bool naWarningShown = false
if not naWarningShown and (na(macdLine) or na(signalLine))
    label.new(bar_index, high * 1.15, 
              "⚠️ MACD NA VALUES DETECTED\nCheck data or timeframe",
              style=label.style_label_down,
              color=color.red,
              textcolor=color.white,
              size=size.normal)
    naWarningShown := true

// Performance Table
if barstate.islast
    var table perfTable = table.new(position.top_right, 2, 8, 
         bgcolor=color.new(color.white, 80),
         border_width=1,
         border_color=color.gray)
    
    table.cell(perfTable, 0, 0, "Metric", 
         text_color=color.black, 
         text_size=size.small,
         bgcolor=color.new(color.blue, 80))
    table.cell(perfTable, 1, 0, "Value", 
         text_color=color.black, 
         text_size=size.small,
         bgcolor=color.new(color.blue, 80))
    
    table.cell(perfTable, 0, 1, "Total Trades", 
         text_color=color.black, text_size=size.small)
    table.cell(perfTable, 1, 1, str.tostring(totalTrades), 
         text_color=color.black, text_size=size.small)
    
    table.cell(perfTable, 0, 2, "Win Rate", 
         text_color=color.black, text_size=size.small)
    table.cell(perfTable, 1, 2, str.tostring(winRate, "#.##") + "%", 
         text_color=color.black, text_size=size.small)
    
    table.cell(perfTable, 0, 3, "Profit Factor", 
         text_color=color.black, text_size=size.small)
    table.cell(perfTable, 1, 3, str.tostring(profitFactor, "#.##"), 
         text_color=color.black, text_size=size.small)
    
    table.cell(perfTable, 0, 4, "Max Drawdown", 
         text_color=color.black, text_size=size.small)
    table.cell(perfTable, 1, 4, str.tostring(maxDrawdown, "#.##") + "%", 
         text_color=color.black, text_size=size.small)
    
    table.cell(perfTable, 0, 5, "Avg Win", 
         text_color=color.black, text_size=size.small)
    table.cell(perfTable, 1, 5, str.tostring(avgWin, "#.##"), 
         text_color=color.black, text_size=size.small)
    
    table.cell(perfTable, 0, 6, "Avg Loss", 
         text_color=color.black, text_size=size.small)
    table.cell(perfTable, 1, 6, str.tostring(avgLoss, "#.##"), 
         text_color=color.black, text_size=size.small)
    
    table.cell(perfTable, 0, 7, "Net Profit", 
         text_color=color.black, text_size=size.small)
    table.cell(perfTable, 1, 7, str.tostring(strategy.netprofit, "#.##"), 
         text_color=color.black, text_size=size.small)

// ============================================================================
// ALERTS
// ============================================================================

// Alert Conditions
if enableAlerts and longCondition
    alert("MACD 86% Strategy: LONG signal at " + str.tostring(close, "#.##") + 
          ". Stop Loss: " + str.tostring(longSL, "#.##") + 
          (not na(longTP) ? ". Take Profit: " + str.tostring(longTP, "#.##") : ""),
          alert.freq_once_per_bar)

if enableAlerts and shortCondition
    alert("MACD 86% Strategy: SHORT signal at " + str.tostring(close, "#.##") + 
          ". Stop Loss: " + str.tostring(shortSL, "#.##") + 
          (not na(shortTP) ? ". Take Profit: " + str.tostring(shortTP, "#.##") : ""),
          alert.freq_once_per_bar)

if enableAlerts and longStopHit
    alert("MACD 86% Strategy: LONG position closed - Stop Loss hit at " + 
          str.tostring(close, "#.##"), alert.freq_once_per_bar)

if enableAlerts and shortStopHit
    alert("MACD 86% Strategy: SHORT position closed - Stop Loss hit at " + 
          str.tostring(close, "#.##"), alert.freq_once_per_bar)

// Take Profit Alerts
if enableAlerts and strategy.position_size > 0 and not na(longTP) and ta.crossover(high, longTP)
    alert("MACD 86% Strategy: LONG position closed - Take Profit hit at " + 
          str.tostring(longTP, "#.##"), alert.freq_once_per_bar)

if enableAlerts and strategy.position_size < 0 and not na(shortTP) and ta.crossunder(low, shortTP)
    alert("MACD 86% Strategy: SHORT position closed - Take Profit hit at " + 
          str.tostring(shortTP, "#.##"), alert.freq_once_per_bar)